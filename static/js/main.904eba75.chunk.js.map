{"version":3,"sources":["components/Fullpage.js","sections/AboutSection.js","components/SkillCard.js","sections/SkillSection.js","components/DownIcon.js","sections/TitlesSection.js","App.js","serviceWorker.js","index.js"],"names":["Fullpage","children","this","props","className","Component","AboutSection","style","backgroundColor","color","data","sections","title","items","map","p","content","SkillCard","skill","src","image","SkillSection","name","eachSkill","DownIcon","onClick","maxWidth","icon","TitlesSection","subtitle","Object","keys","links","key","url","activeClass","to","spy","smooth","offset","duration","onSetActive","handleSetActive","icons","down","console","log","App","changeColor","setState","state","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.904eba75.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './Fullpage.css';\r\n\r\nclass Fullpage extends Component {\r\n    render() {\r\n        const { children } =this.props\r\n        return(\r\n            <div className={`fullpage ${this.props.className || ''}`}>\r\n                {children}\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Fullpage","import React, {Component} from 'react';\r\nimport Fullpage from \"../components/Fullpage\";\r\nimport data from \"../data.json\";\r\n\r\nimport './AboutSection.css';\r\n\r\nclass AboutSection extends Component {\r\n    render() {\r\n\r\n        return(\r\n            <div style={{backgroundColor:this.props.backgroundColor}} >\r\n                <Fullpage>\r\n                    <h3 className=\"title1\" style={{color:this.props.color}}>{data.sections[0].title}</h3>\r\n                    <div className=\"paragraphs\">\r\n                        {data.sections[0].items.map(p =>{\r\n                            return <p>{p.content}</p>;\r\n                        })}\r\n                    </div>\r\n                </Fullpage>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default AboutSection","import React, {Component} from 'react';\r\nimport './SkillCard.css';\r\n\r\nclass SkillCard extends Component {\r\n    render() {\r\n        const { skill } =this.props\r\n        return(\r\n            <div className=\"card\">\r\n                <div className=\"image-wrapper\">\r\n                    <img src={skill.content.image} />\r\n                </div>\r\n                <div className=\"skill-title-wrapper\">\r\n                    <h4>{skill.content.title}</h4>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default SkillCard","import React, {Component} from 'react';\r\nimport Fullpage from \"../components/Fullpage\";\r\nimport SkillCard from \"../components/SkillCard\";\r\nimport data from \"../data.json\";\r\n\r\nimport './SkillSection.css';\r\nimport {Element} from \"react-scroll\";\r\n\r\nclass SkillSection extends Component {\r\n    render() {\r\n        return(\r\n            <div style={{backgroundColor:this.props.backgroundColor}}>\r\n            <Fullpage>\r\n                <Element name=\"skill\" className=\"element\"> </Element>\r\n                <h3 className=\"title1\" style={{color:this.props.color}}>{data.sections[1].title}</h3>\r\n                <div className=\"cards-wrapper\">\r\n                    {data.sections[1].items.map(eachSkill =>{\r\n                        return(\r\n                            <SkillCard skill={eachSkill} />\r\n                        );\r\n                    })}\r\n                </div>\r\n            </Fullpage>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default SkillSection","import React, {Component} from 'react';\r\n\r\nconst DownIcon=(props) => {\r\n    return(\r\n        <div className=\"down-icon\" onClick={props.onClick}>\r\n            <div style={{maxWidth:'30px'}}>\r\n                <img src={props.icon}  />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default DownIcon","import React, {Component} from 'react';\r\nimport Fullpage from \"../components/Fullpage\";\r\nimport data from \"../data.json\";\r\nimport {SocialIcon} from \"react-social-icons\";\r\nimport DownIcon from \"../components/DownIcon\";\r\nimport { Link, Element } from 'react-scroll';\r\n\r\n\r\nimport \"./TitlesSection.css\";\r\n\r\nclass TitlesSection extends Component {\r\n\r\n\r\n    render() {\r\n\r\n        return(\r\n            <div style={{backgroundColor:this.props.backgroundColor}} >\r\n            <Fullpage>\r\n                <h1 style={{color:this.props.color}}>{data.title}</h1>\r\n                <div>\r\n                    <h2>{data.subtitle}</h2>\r\n                </div>\r\n                <div className=\"icons-wrapper\">\r\n                    {\r\n                        Object.keys(data.links).map(key =>{\r\n                            return(\r\n                                <div className=\"icon\">\r\n                                    <SocialIcon url={data.links[key]} />\r\n                                </div>\r\n                            );\r\n                        })\r\n                    }\r\n                </div>\r\n            </Fullpage>\r\n                <Link activeClass=\"active\" to=\"about\" spy={true} smooth={true} offset={50} duration={500} onSetActive={this.handleSetActive}>\r\n                    <DownIcon icon={data.icons.down} onClick={()=> console.log(\"im working\")} />\r\n                </Link>\r\n                <Element name=\"about\" className=\"element\"> </Element>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default TitlesSection","import React, {Component} from 'react';\nimport data from \"./data.json\";\n\nimport './App.css';\nimport AboutSection from \"./sections/AboutSection\";\nimport SkillSection from \"./sections/SkillSection\";\nimport TitlesSection from \"./sections/TitlesSection\";\n\nimport {Element, Link} from \"react-scroll\";\n\nclass App extends Component {\n\n    constructor() {\n        super();\n        this.state ={\n            color : '#B01712',\n            backgroundColor:'#ffffff'\n        }\n\n    }\n\n    changeColor = () =>{\n        this.setState({\n\n            color: this.state.color ==='#B01712'?'#ffffff': '#B01712',\n            backgroundColor: this.state.backgroundColor === '#ffffff'? '#aaaaaa':'#ffffff'\n\n        })\n    }\n\n    render() {\n\n\n        return(\n            <div className=\"App\">\n                <div className=\"navigation\">\n                    <Link activeClass=\"active\" to=\"skill\" spy={true} smooth={true} offset={50} duration={500} onSetActive={this.handleSetActive}>\n                        <div className=\"nav-item\">Skills</div>\n                    </Link>\n                    <Link activeClass=\"active\" to=\"about\" spy={true} smooth={true} offset={50} duration={500} onSetActive={this.handleSetActive}>\n                        <div className=\"nav-item\">About</div>\n                    </Link>\n                    <div className=\"color-me\" onClick={() =>{this.changeColor()}}>\n                        Color Me &#127971;\n                    </div>\n\n                </div>\n                <TitlesSection color={this.state.color} backgroundColor={this.state.backgroundColor} />\n                <AboutSection color={this.state.color} backgroundColor={this.state.backgroundColor} />\n                <SkillSection color={this.state.color} backgroundColor={this.state.backgroundColor} />\n            </div>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}